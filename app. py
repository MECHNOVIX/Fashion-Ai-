from flask import Flask, request, jsonify, render_template
import torch
from PIL import Image
from transformers import (
    BlipProcessor,
    BlipForConditionalGeneration,
    AutoTokenizer,
    AutoModelForCausalLM
)

app = Flask(__name__)

# ---- Load Models ----
print("ðŸ”„ Loading BLIP-2 (Vision model)...")
blip_processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-large")
blip_model = BlipForConditionalGeneration.from_pretrained(
    "Salesforce/blip-image-captioning-large",
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32
)

print("ðŸ”„ Loading Mistral-7B (LLM)...")
llm_name = "mistralai/Mistral-7B-Instruct-v0.1"
tokenizer = AutoTokenizer.from_pretrained(llm_name)
llm_model = AutoModelForCausalLM.from_pretrained(
    llm_name,
    device_map="auto",
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32
)

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/analyze", methods=["POST"])
def analyze():
    file = request.files['image']
    question = request.form['question']
    image = Image.open(file.stream)

    # Step 1: Caption with BLIP-2
    inputs = blip_processor(image, return_tensors="pt").to(blip_model.device)
    out = blip_model.generate(**inputs)
    caption = blip_processor.decode(out[0], skip_special_tokens=True)

    # Step 2: Reasoning with Mistral
    prompt = f"The image shows: {caption}. Answer this question: {question}"
    llm_inputs = tokenizer(prompt, return_tensors="pt").to(llm_model.device)
    outputs = llm_model.generate(**llm_inputs, max_new_tokens=150)
    answer = tokenizer.decode(outputs[0], skip_special_tokens=True)

    return jsonify({"caption": caption, "answer": answer})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
